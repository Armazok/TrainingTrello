{"version":3,"sources":["Todolists/Todolist.module.css","Todolists/AddItemForm.tsx","Todolists/EditableSpan.tsx","Todolists/Todolists.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","error","setError","onClickAddTask","trim","addItem","TextField","variant","label","value","onChange","e","currentTarget","onKeyDown","key","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Todolists","titleTodolist","tasks","deleteTasks","changeFilter","filter","checkedTask","id","addTask","deleteTodolists","changeTaskTitle","changeTitleTodolists","newTitleTodolists","Delete","map","t","className","isDone","s","Checkbox","checked","newValue","Button","style","marginTop","App","todolistsOne","v1","todolistsTwo","todolists","setTodolists","objTasks","setObjTasks","deleteTask","tasksId","objTaskId","sampleNewTask","taskId","newTitle","todo","find","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","sampleNewTodolists","spacing","FilterTasks","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fe8b0e2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeFilter\":\"Todolist_activeFilter__3dVyQ\",\"errorText\":\"Todolist_errorText__1CRlZ\",\"errorInput\":\"Todolist_errorInput__YM3ml\",\"checkedTask\":\"Todolist_checkedTask__d7o39\"};","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@mui/material\";\nimport {ControlPoint} from \"@mui/icons-material\";\n\n\ntype AddItemFormPropsType = {\n    id: string\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemFormPropsType) {\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n    const onClickAddTask = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title)\n            setTitle(\"\")\n        } else {\n            setError(\"Maybe you?\")\n        }\n\n\n    }\n    const onChangeAddTask = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(\"\")\n    }\n    const onKeyDownAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            onClickAddTask()\n        }\n    }\n\n    return (\n        <div>\n            <TextField\n                variant={'outlined'}\n                label={'Type value'}\n                value={title}\n                onChange={onChangeAddTask}\n                onKeyDown={onKeyDownAddTask}\n                error={!!error}\n                helperText={error}\n            />\n            <IconButton onClick={onClickAddTask} color={\"primary\"}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanType) {\n    let [editMode, setEditMode] = useState(false)\n    let [title, setTitle] = useState(\"\")\n\n\n    const activeEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const activeViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <TextField\n                value={title}\n                onChange={onChangeInput}\n                onBlur={activeViewMode}\n                autoFocus/>\n            : <span onDoubleClick={activeEditMode}>{props.title}</span>\n    )\n}","import React, {ChangeEvent} from 'react';\nimport {FilterType, TasksType} from \"../App\";\nimport s from \"./Todolist.module.css\"\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\ntype TodolistType = {\n    id: string\n    titleTodolist: string\n    tasks: TasksType[]\n    deleteTasks: (tasksId: string, objTaskId: string) => void\n    changeFilter: (value: FilterType, objTaskId: string) => void\n    filter: FilterType\n    addTask: (title: string, objTaskId: string) => void\n    checkedTask: (taskId: string, isDone: boolean, objTaskId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, objTaskId: string) => void\n    deleteTodolists: (objTaskId: string) => void\n    changeTitleTodolists: (idTodolists: string, newTitle: string) => void\n}\n\nexport const Todolists: React.FC<TodolistType> = ({\n                                                      titleTodolist,\n                                                      tasks,\n                                                      deleteTasks,\n                                                      changeFilter,\n                                                      filter,\n                                                      checkedTask,\n                                                      id,\n                                                      addTask,\n                                                      deleteTodolists,\n                                                      changeTaskTitle,\n                                                      changeTitleTodolists\n                                                  }) => {\n\n    const onClickAll = () => changeFilter(\"all\", id)\n    const onClickActive = () => changeFilter(\"active\", id)\n    const onClickCompleted = () => changeFilter(\"completed\", id)\n    const styleActiveFilterAll = () => filter === \"all\" ? \"contained\" : \"text\"\n    const styleActiveFilterActive = () => filter === \"active\" ? \"contained\" : \"text\"\n    const styleActiveFilterCompleted = () => filter === \"completed\" ? \"contained\" : \"text\"\n\n    const onClickRemoveTodolists = () => {\n        deleteTodolists(id)\n    }\n    const addTasks = (title: string) => {\n        addTask(title, id)\n    }\n\n    const replacementTitleTodolists = (newTitleTodolists: string) => {\n        changeTitleTodolists(newTitleTodolists, id)\n    }\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={titleTodolist} onChange={replacementTitleTodolists}/>\n                <IconButton onClick={onClickRemoveTodolists}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm\n                id={id}\n                addItem={addTasks}\n            />\n            <div>\n                {\n                    tasks.map((t) => {\n                        const onClickDeleteTasks = () => deleteTasks(t.id, id)\n                        const onChangeCheckedBox = (e: ChangeEvent<HTMLInputElement>) => {\n                            checkedTask(t.id, e.currentTarget.checked, id)\n                        }\n                        const onChangeTitleTask = (newValue: string) => {\n                            changeTaskTitle(t.id, newValue, id)\n                        }\n                        return (\n                            <div className={t.isDone ? s.checkedTask : \"\"} key={t.id}>\n                                <Checkbox\n                                    checked={t.isDone}\n                                    onChange={onChangeCheckedBox}\n                                />\n                                <EditableSpan\n                                    title={t.title}\n                                    onChange={onChangeTitleTask}\n                                />\n                                <IconButton onClick={onClickDeleteTasks}>\n                                    <Delete/>\n                                </IconButton>\n                             </div>\n                        )\n                    })\n                }\n            </div>\n            <div>\n                <Button style={{marginTop: \"13px\"}} variant={styleActiveFilterAll()} onClick={onClickAll}>All</Button>\n                <Button style={{marginTop: \"13px\"}} color={'primary'} variant={styleActiveFilterActive()} onClick={onClickActive}>Active</Button>\n                <Button style={{marginTop: \"13px\"}} color={'secondary'} variant={styleActiveFilterCompleted()} onClick={onClickCompleted}>Completed</Button>\n            </div>\n        </div>\n    );\n};\n\n\n\n\n\n\n\n\n\n\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolists} from \"./Todolists/Todolists\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./Todolists/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type objTasksType = {\r\n    [key: string]: TasksType[]\r\n}\r\n\r\nfunction App() {\r\n    let todolistsOne = v1()\r\n    let todolistsTwo = v1()\r\n\r\n    const [todolists, setTodolists] = useState<TodolistsType[]>([\r\n        {id: todolistsOne, title: \"Todolists_1\", filter: \"all\"},\r\n        {id: todolistsTwo, title: \"Todolists_2\", filter: \"all\"},\r\n    ])\r\n    const [objTasks, setObjTasks] = useState<objTasksType>({\r\n        [todolistsOne]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JavaScript\", isDone: true},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n        ],\r\n        [todolistsTwo]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JavaScript\", isDone: false},\r\n        ],\r\n    })\r\n\r\n    function deleteTask(tasksId: string, objTaskId: string) {\r\n        //  setTasks(tasks.filter(t => t.id !== tasksId))\r\n        setObjTasks({...objTasks, [objTaskId]: objTasks[objTaskId].filter(t => t.id !== tasksId)})\r\n    }\r\n\r\n    function changeFilter(filter: FilterType, objTaskId: string) {\r\n        setTodolists(todolists.map(t => t.id === objTaskId ? {...t, filter: filter} : t))\r\n    }\r\n\r\n    function addTask(title: string, objTaskId: string) {\r\n        let sampleNewTask = {id: v1(), title: title, isDone: false}\r\n        //  setTasks([sampleNewTask, ...tasks])\r\n        setObjTasks({...objTasks, [objTaskId]: [sampleNewTask, ...objTasks[objTaskId]]})\r\n\r\n    }\r\n\r\n    function checkedTask(taskId: string, isDone: boolean, objTaskId: string) {\r\n        //   setTasks(tasks.map(ch => ch.id === taskId ? {...ch, isDone} : ch))\r\n        setObjTasks({...objTasks, [objTaskId]: objTasks[objTaskId].map(t => t.id === taskId ? {...t, isDone} : t)})\r\n    }\r\n\r\n    function deleteTodolists(objTaskId: string) {\r\n        setTodolists(todolists.filter(t => t.id !== objTaskId))\r\n\r\n        delete objTasks[objTaskId]\r\n        setObjTasks({...objTasks})\r\n\r\n    }\r\n\r\n    function addTodolists(title: string) {\r\n        let sampleNewTodolists: TodolistsType = {id: v1(), title: title, filter: \"all\"}\r\n        setTodolists([sampleNewTodolists, ...todolists])\r\n\r\n        setObjTasks({...objTasks, [sampleNewTodolists.id]: []})\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, objTaskId: string) {\r\n        setObjTasks({...objTasks, [objTaskId]: objTasks[objTaskId].map(t => t.id === taskId ? {...t, title: newTitle} : t)\r\n        })\r\n    }\r\n\r\n    function changeTitleTodolists(newTitle: string, objTaskId: string) {\r\n        let todo = todolists.find(tl => tl.id === objTaskId)\r\n        if (todo) {\r\n            todo.title = newTitle\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton edge={'start'} color={'inherit'} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm id={\"sdf\"} addItem={addTodolists}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let FilterTasks = objTasks[tl.id]\r\n                            if (tl.filter === \"completed\") {\r\n                                FilterTasks = FilterTasks.filter(t => t.isDone)\r\n                            }\r\n                            if (tl.filter === \"active\") {\r\n                                FilterTasks = FilterTasks.filter(t => !t.isDone)\r\n                            }\r\n                            return (\r\n                               <Grid item>\r\n                                   <Paper style={{padding: '10px'}}>\r\n                                       <Todolists\r\n                                           key={tl.id}\r\n                                           id={tl.id}\r\n                                           titleTodolist={tl.title}\r\n                                           tasks={FilterTasks}\r\n                                           deleteTasks={deleteTask}\r\n                                           changeFilter={changeFilter}\r\n                                           filter={tl.filter}\r\n                                           addTask={addTask}\r\n                                           checkedTask={checkedTask}\r\n                                           deleteTodolists={deleteTodolists}\r\n                                           changeTaskTitle={changeTaskTitle}\r\n                                           changeTitleTodolists={changeTitleTodolists}\r\n                                       />\r\n                                   </Paper>\r\n                               </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}